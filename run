#!/usr/bin/env python

import os
import os.path as op
import json
from glob import glob 

## 
FLYWHEEL_BASE = '/flywheel/v0'
MANIFEST_FILE = op.join(FLYWHEEL_BASE, 'manifest.json')
CONFIG_FILE = op.join(FLYWHEEL_BASE, 'config.json')
INPUT_DIR = op.join(FLYWHEEL_BASE, 'input')
OUTPUT_DIR = op.join(FLYWHEEL_BASE, 'output')
CONTAINER = '[flywheel|afq-browser]'

## Parse config: 

# If the config file doesn't exist, we create the config from 
# the manifest defaults instead:
if not op.exists(CONFIG_FILE):
    manifest = json.loads(open(MANIFEST_FILE, 'r').read())
    config = manifest['config']
    print("Creating config from the manifest")
else:
    config = json.loads(open(CONFIG_FILE, 'r').read())['config']
    print("Creating config from file: ", CONFIG_FILE)

print("CONFIG: ", config)
title = config['title']

## Validate input data
print("INPUT_DIR: ", INPUT_DIR)
ll = os.listdir(INPUT_DIR)
print(ll)
if len(ll) > 0: 
    print("%s starting"%CONTAINER)
else: 
    print("Input directory is empty: %s"%INPUT_DIR)

try:
    input_file = glob(op.join(INPUT_DIR, 'afq*.mat'))[0]
except: 
    input_file = glob(op.join(INPUT_DIR, 'AFQ_file', 'afq*.mat'))[0]

## Call the algorithm
from afqbrowser.browser import assemble
assemble(input_file, 
         target=OUTPUT_DIR, 
         metadata=None, 
         title=title, 
         subtitle=False, 
         link=False, 
         sublink=False)

# ## Handle output files
# print(os.listdir(OUTPUT_DIR))
# print(os.listdir(op.join(OUTPUT_DIR, 'AFQ-Browser')))

# # The output is in a directory, so we have to zip it up:
# import shutil
# shutil.make_archive(op.join(OUTPUT_DIR, 'AFQ-Browser'), 
#                     'zip', 
#                     op.join(OUTPUT_DIR, 'AFQ-Browser', 'client'))
# # Remove the unzipped version
# shutil.rmtree(op.join(OUTPUT_DIR, 'AFQ-Browser'))
